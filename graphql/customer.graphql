


extend type Mutation @guard{
  
  createNewCustomer(input: CustomerValueInput! @spread): Customer!
  createCustomerAddress(input: RegionValueInput! @spread, country_code: String,street: String,telephone: String,postcode: String,city: String, firstname: String,lastname: String, default_shipping: Boolean, default_billing: Boolean, customer_id: Int): CustomerAddressResponse!
  createPreference(customer_id: String! brand: String!, parent: String!, type: Int!): PreferenceList!
  createCustomerSearch(input: CustomerSearchInput! @spread): CustomerActivityResponse!
  createCustomerSetting(vp1: String, vp2: String, vp3: String, store1: String, store2: String, store3: String, store4:  String, store5: String, customer_id: Int!): CustomerValuePack! @create
  createValuePack(vp1: Int, vp2: Int, vp3:Int,customer_id: Int!): CustomerValuePackSet!
  removePreferenceItem(primary_id:Int!): removePreferenceItem!
  registerUpc(customer_id: Int!, upc: String!, image:String): registerUpc!

}
extend type Mutation {
generateAccountCode(input: DeviceOtpInput! @spread): Otp!
accountValidation(accountCode: String!, device_id: String!, mobile_number: String!): Accountvalidation!
}

extend type Query @guard{
    preferences(customer_id: String! @eq): PreferneceResponse!
    createCustomerSetting(customer_id: Int! @eq): [CustomerValuePack!] @all
    getValuePack(customer_id: String! @eq): [CustomerValuePack!] @all
	  preferencesValidate(customer_id: Int!, brand: String!, parent: String!): PreferenceValidateResponse!
    valuesPackData: valuesPackData!
    getRelatedParent(customer_id: Int!, sku: String, category_id: Int): getRelatedParent
    brandList(customer_id: Int!, parent_id: Int!): brandList!

}

extend type Query {
  RefreshToken: RefreshToken!
}


type registerUpc{
  code:Int!
  comment:String!
}

type removePreferenceItem{
  code:Int
  comment:String
}


type brandList{
  details:[BrandListData!]
  code: Int
  comment: String
  score: Float
}
 type BrandListData {
   brandname:String
   primary_id:Int
   upc_count: Int
 }

type getRelatedParent{
  details:[getRelatedParentData]
  code: Int
  error: Int
  message: String
  current_score:Float
  subcategory1:String
  subcategory2:String
  category:String,
  category_id:Int

}

type getRelatedParentData{
  brand_id: Int
  parent_id: Int
  parent_name: String
  brand_name: String
  score: Float
  countproduct:Int
  preferred:Int


}

type RefreshToken {
  token:String
}
type valuesPackData {
  name: [DetailesArray!]
}
type DetailesArray{
  name: String
  values_pack_id: Int
}
type PreferneceResponse{
    allRecords: [Allrecord!]!
}

type Allrecord{
    customer_id: Int!
    sku: String
    brand: String
    parent: String
    type: Int
    parent_id: Int
    brand_id: Int
    primary_id:Int
}

type CustomerAddressResponse {
  region:RegionDataResponse!
  country_code: String!
  street: String!
  telephone: String
  postcode: String
  city: String
  firstname: String
  lastname: String
  default_shipping: Boolean
  default_billing: Boolean
  customer_id: Int!
}

type RegionDataResponse {
  region: String!
  region_code: String
  region_id: Int
}


input RegionValueInput {
  region:RegionData!
  country_code: String!
  street: String!
  telephone: String
  postcode: String
  city: String
  firstname: String
  lastname: String
  default_shipping: Boolean
  default_billing: Boolean
  customer_id: Int
}

input RegionData {
  region: String!
  region_code: String
  region_id: Int
}

type Otp {
  customer:Otpdata!
}

type Otpdata {
  device_id: String!
  account_code: String!
  code:Int!
  mobile_number: String!
  error:Int!
  comment: String!
  customer_id: String
  old_user:Int!
}

input DeviceOtpInput{
  device_id: String!
  mobile_number: String!

}


type Accountvalidation{
    accountCode:String!
    device_id: String!, 
    mobile_number: String!
    iscodeValidated: Int!
    code: Int!
    comment: String!
    customer_id: String
    access_token: String
}



type Customer {
  customer:Customerdataforregistration!
  
}


type Customerdataforregistration {
  firstname: String!
  lastname: String
  email: String! 
  password: String!
  date_of_birth: String
  gender: String
  zip_code: String
  is_subscribed: String
  deviceId: String
  phoneNumber: String
  response: ResponseData!

  

}

type ResponseData{
  message: String!
  code:Int!
  customer_id: Int
}

input CustomerValueInput{
  firstname: String
  lastname: String
  email: String 
  password: String
  date_of_birth: String
  gender: String
  zip_code: String
  is_subscribed: Boolean
  deviceId: String
  phoneNumber: String
  
}


type PreferenceList {
  preference:preferenceData!

}

type preferenceData{
  code:Int
  comment:String
  type:Int
}

input CustomerSearchInput {
  term: String
  customer_id: Int!
  os: String
  ip_address: String
  type: Int!

}

type CustomerActivityResponse{
  search_term:CustomerSearchResponse!
}



type CustomerSearchResponse {
  term: String
  customer_id: Int!
  os: String
  ip_address: String
  type: Int

}

"Define the save value type schema for createcustomerSetting"
type CustomerValuePack {
  vp1: Int
  vp2: Int
  vp3: Int
  customer_id: Int!
  average_vp_score: String
}

type PreferenceValidateResponse{
  Records: recordsData!
}

type recordsData{
    code: Int
    type: String
    comment: String
}

type CustomerValuePackSet{
  vp1: Int
  vp2: Int
  vp3: Int
  customer_id: Int
}